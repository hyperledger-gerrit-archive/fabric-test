# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
---
# fabric version is used to specify what fabric version
# to be used. Supports from 1.4.1.
# If version is given as 1.4.1, images from hyperledger/ will be used
# If version contains stable in it, images from
# nexus3.hyperledger.org:10001/hyperledger/ will be used
fabric_version: 1.4.1-stable
# peer database ledger type (couchdb, goleveldb)
db_type: couchdb
# This parameter is used to define fabric logging spec in peers
peer_fabric_logging_spec: error
# This parameter is used to define fabric logging spec in orderers
orderer_fabric_logging_spec: error
# tls in the network (true, false or client(mutualtls))
tls: true
# fabric metrics with prometheus (true/false)
metrics: false

# Location where crypto-config and channel-artifacts are stored
certs_location: /home/ibmadmin/go/src/github.com/hyperledger/fabric-test/fabric/internal/cryptogen/

# Orderer Config Settings
orderer:
# Consensus type
  orderertype: solo
  batchsize:
    maxmessagecount: 500
    absolutemaxbytes: 10 MB
    preferredmaxbytes: 2 MB
  batchtimeout: 2s
# Etcd raft options and this will be used when orderertype is
# selected as etcdraft
  etcdraft_options:
    TickInterval: 500ms
    ElectionTick: 10
    HeartbeatTick: 1
    MaxInflightBlocks: 5
    SnapshotIntervalSize: 100 MB

# Number of kafka and zookeeper to be launched in network
# when orderertype is kafka
kafka:
  num_kafka: 5
  # number of kafka replications for each channel
  num_kafka_replications: 3
  num_zookeepers: 3

orderer_organizations:
- name: ordererorg1
  msp_id: OrdererOrgExampleCom
  num_orderers: 1
  num_ca: 1

peer_organizations:
- name: org1
  msp_id: Org1ExampleCom
  num_peers: 2
  num_ca: 1

- name: org2
  msp_id: Org2ExampleCom
  num_peers: 2
  num_ca: 1

# Capabilites for Orderer, Channel, Application groups
orderer_capabilities:
  V1_4_2: true

channel_capabilities:
  V1_4_2: true

application_capabilities:
  V1_3: true

# Create the channel creation transactions; every org will be included in every channel
# This used testorgschannel as the prefix and channels are used like testorgschannel0,
# testorgschannel1.... based on number of channels passed
# (note: client will need to submit the transactions to create channels)
num_channels: 10

k8s:
  service_type: NodePort
  data_persistance: true
  storage_class: default
  storage_capacity: 20Gi

## TODO: future enhancement to read individual profiles for each channel creation.
#profiles:
#- name: TwoOrgsOrdererGenesis
#  orderers:
#    - orderer0
#- name: TwoOrgsChannelProfile
#  consortium: SampleConsortium
#  organizations:
#    - org1
#    - org2
#- name: AnotherChannelProfile
#  consortium: SampleConsortium
#  organizations:
#    - org3
#    - org4