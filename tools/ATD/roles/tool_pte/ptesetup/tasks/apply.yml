# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
- name: Setup few variables
  set_fact:
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    fabrictestpath: "/opt/gopath/{{ env }}/src/github.com/hyperledger/fabric-test"
    gopath: "/opt/gopath/{{ env }}"

- name: Create orgs list
  set_fact:
    channelorgs: "{{ channelorgs | default([]) + item.orgs | default([]) }}"
  with_items: "{{ pte.ptechannels }}"

- name: Number of orgs in channels
  set_fact:
    numorgs: "{{ numorgs | default([]) + [ item | default() ] }}"
  with_sequence: count={{ channelorgs|length }}

- name: make numorgs list
  set_fact:
    numorgs: "{{ numorgs | list }}"

- name: Create testcases.sh for PTE
  template:
    src: "{{ playbook_dir }}/../../images/pte/testcases.sh"
    dest: "{{ fabrictestpath }}/testcases.sh"
    mode: 0755

- name: Create samplecc-create file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-create-TLS.j2"
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/preconfig/channels/chan{{ item.channelnum }}-create-TLS.json"
  with_items: "{{ channellists }}"

- name: Create samplecc-join file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-join-TLS.j2"
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/preconfig/channels/chan{{ item.channelnum }}-join-TLS.json"
  with_items: "{{ channellists }}"

- name: Create samplecc-install file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-install-TLS.j2"
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/preconfig/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-install-TLS.json"
  with_items: "{{ channellists }}"

- name: Create samplecc-instantiate file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-instantiate-TLS.j2"
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/preconfig/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-instantiate-TLS.json"
  with_items: "{{ channellists }}"

- replace:
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase }}-TLS.json"
    regexp: '^(.*)name(.*)$'
    replace: '    "name": "{{ item.name }}",'
  with_items: "{{ channellists }}"

- replace:
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase }}-TLS.json"
    regexp: '^(.*)ServiceCredentials(.*)$'
    replace: '                {"ServiceCredentials":"CITest/CISCFiles/config-chan{{ item.channelnum|int }}-TLS.json"}'
  with_items: "{{ channellists }}"

- replace:
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase_query }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase }}-TLS.json"
    regexp: '^(.*)name(.*)$'
    replace: '    "name": "{{ item.name }}",'
  with_items: "{{ channellists }}"

- replace:
    dest: "{{ fabrictestpath }}/tools/PTE/CITest/{{ testcase_query }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase }}-TLS.json"
    regexp: '^(.*)ServiceCredentials(.*)$'
    replace: '                {"ServiceCredentials":"CITest/CISCFiles/config-chan{{ item.channelnum|int }}-TLS.json"}'
  with_items: "{{ channellists }}"

- name: Generating the Dockerfile for PTE
  copy:
    src: "{{ playbook_dir }}/../../images/pte/Dockerfile"
    dest: "{{ fabrictestpath }}/Dockerfile"

- name: Building the docker image for PTE
  shell: "docker build -t pte:latest . "
  args:
    chdir: "{{ fabrictestpath }}"

- name: Create CISCFiles directory
  file:
    path: "{{ fabricworkdir }}/CISCFiles"
    state: directory
    mode: 0755

- name: Create config file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/config-chan-TLS.j2"
    dest: "{{ fabricworkdir }}/CISCFiles/config-chan{{ item.1 }}-TLS.json"
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Create docker compose file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/pte-compose.j2"
    dest: "{{ fabricworkdir }}/run/pte-compose.yml"
  with_together:
    - "{{ channels }}"
    - "{{ peers }}"

- name: Create Log directory
  file:
    path: "{{ fabrictestpath }}/Logs"
    state: directory
    mode: 0755

- name: Start PTE docker container
  command: "docker-compose -p {{ env }}.pte-compose -f {{ fabricworkdir }}/run/pte-compose.yml up -d"

- name: Checking the health of PTE container
  shell: while [ $(docker ps -f status=exited -f name=PTE -q | wc -c) -eq 0 ]; do echo "PTE container is running - {{ lookup('pipe', 'date +%m%d%Y-%H%M%S') }}";sleep 120; done
  tags: check
