# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

---
- name: Setup variables
  set_fact:
    goroot: "/opt/go"
    gopath: "/opt/gopath/{{ env }}"
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    fabricpath: "/opt/gopath/{{ env}}/src/github.com/hyperledger/fabric"
    fabrictestpath: "/opt/gopath/{{ env }}/src/github.com/hyperledger/fabric-test"
    target: "{{ target | default('configtxgen') }}"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name : Create channel and channel orgs list
  set_fact:
    channels: |
      {{ channels | default([]) + [{ 'name':item.name | default(),
        'orgs':item.orgs | default([]),
        'orderer': item.orderer | default() }] }}
  with_items: "{{ pte.ptechannels }}"

- name: Sort the channel list
  set_fact:
    channels: "{{ channels | unique | sort }}"

- name: Get the number of channels
  set_fact:
    channelnum: "{{ channelnum | default() + item | default() }}"
  with_sequence: count={{ channels|length }}

- name: make channelnum list
  set_fact:
    channelnum: "{{ channelnum | list }}"

- name: Transaction rate parameters
  set_fact:
    transMode: "{{ pte.transaction.transMode }}"
    targetPeers: "{{ pte.transaction.targetPeers }}"
    TLS: "{{ pte.transaction.TLS }}"
    nProcPerOrg: "{{ pte.transaction.nProcPerOrg }}"
    nRequest: "{{ pte.transaction.nRequest }}"
    runDur: "{{ pte.transaction.runDur }}"
    peerFailover: "{{ pte.transaction.peerFailover }}"
    ordererFailover: "{{ pte.transaction.ordererFailover }}"

- name: Transaction mode for MIX
  set_fact:
    mixQuery: "{{ pte.transaction.mixOpt.mixQuery }}"
    mixFreq: "{{ pte.transaction.mixOpt.mixFreq }}"
  when: transMode == "Mix"

- name: Transaction mode for BURST
  set_fact:
    burstFreq0: "{{ pte.transaction.burstOpt.burstFreq0 }}"
    burstDur0: "{{ pte.transaction.burstOpt.burstDur0 }}"
    burstFreq1: "{{ pte.transaction.burstOpt.burstFreq1 }}"
    burstDur1: "{{ pte.transaction.burstOpt.burstDur1 }}"
  when: transMode == "Burst"

- name: Transaction mode for CONSTANT
  set_fact:
    recHist: "{{ pte.transaction.constantOpt.recHist }}"
    constFreq: "{{ pte.transaction.constantOpt.constFreq }}"
    devFreq: "{{ pte.transaction.constantOpt.devFreq }}"
  when: transMode == "Constant"

- name: Event options
  set_fact:
    eventType: "{{ pte.transaction.eventOpt.type }}"
    eventListener: "{{ pte.transaction.eventOpt.listener }}"
    eventTimeout: "{{ pte.transaction.eventOpt.timeout }}"

- name: Timeout Options
  set_fact:
    preconfig: "{{ pte.transaction.timeoutOpt.preConfig }}"
    request: "{{ pte.transaction.timeoutOpt.request }}"

- name: failover Options
  set_fact:
    method: "{{ pte.transaction.failoverOpt.method }}"
    list: "{{ pte.transaction.failoverOpt.list }}"

- name: Payload options
  set_fact:
    payLoadType: "{{ pte.transaction.ccOpt.payLoadType }}"
    payLoadMin: "{{ pte.transaction.ccOpt.payLoadMin }}"
    payLoadMax: "{{ pte.transaction.ccOpt.payLoadMax }}"

- name: Create list
  set_fact:
    channellists: |
      {{ channellists | default([]) + [{ 'name':item.0.name | default(),
        'orgs':item.0.orgs | default([]),
        'orderer': item.0.orderer | default(),
        'channelnum': item.1|int }] }}
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Get ca object list
  set_fact:
    cas: |
      {{ cas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"
  when: cals | length > 0

- name: Get ca object list
  set_fact:
    cas: "{{ cas | default([]) }}"

- name: Sort the ca list
  set_fact:
    cas: "{{ cas | sort(attribute='org') }}"

- name: Get peer object list
  set_fact:
    peers: |
      {{ peers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.','-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Sort the peer list
  set_fact:
    peers: "{{ peers | sort(attribute='org') }}"

- name: Get orderer object list
  set_fact:
    orderers: |
      {{ orderers | default([]) + [{'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Sort the orderer list
  set_fact:
    orderers: "{{ orderers | sort(attribute='org') }}"
    allorgs: "{{ [] }}"

- name: Sort the ca and kafka list
  set_fact:
    caorgs: "{{ cas | map(attribute='org') | list  | unique | sort }}"
    peerorgs: "{{ peers | map(attribute='org') | list  | unique | sort }}"
    ordererorgs: "{{ orderers | map(attribute='org') | list  | unique | sort }}"
    kafkas: "{{ kafkals | sort }}"

- name: Create orgs list
  set_fact:
    channelorgs: "{{ channelorgs | default([]) + item.orgs | default([]) }}"
  with_items: "{{ pte.ptechannels }}"

- name: Number of orgs in channels
  set_fact:
    numorgs: "{{ numorgs | default([]) + [ item | default() ] }}"
  with_sequence: count={{ channelorgs|length }}

- name: make numorgs list
  set_fact:
    numorgs: "{{ numorgs | list }}"

- name: Make list for channels
  set_fact:
    endlist: "{{ (channelnum|length)/2 | int }}"
  when: "{{ (channelnum|length) | int }} is even"
  register: countvar

- name: Make list for channels
  set_fact:
    endlist: "{{ (channelnum|length + 1)/2 | int }}"
  when: "{{ (channelnum|length) | int }} is odd"
  register: countvar

- name: testcase
  set_fact:
    testcase: "{{ testcase | default('multihost') }}"

- name: testcase_query
  set_fact:
    testcase_query: "{{ testcase_query | default('multihost_query') }}"

- name: Create scenario directory
  file:
    path: "{{ fabricworkdir }}/keyfiles/CITest"
    state: directory
    force: yes
    mode: 0775

- name: Create the channel transaction
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/build/bin/configtxgen -profile OrgChannel
    -outputCreateChannelTx keyfiles/CITest/{{ item.name }}.tx -channelID {{ item.name }}
  args:
    chdir: "{{ fabricworkdir }}"
  with_items: "{{ channels }}"

- name: Define the anchor peer for organizations
  shell: >-
    export FABRIC_CFG_PATH={{ fabricworkdir }} &&
    {{ fabricpath }}/build/bin/configtxgen -profile OrgChannel
    -outputAnchorPeersUpdate keyfiles/CITest/{{ item[0] }}.anchor.tx
    -channelID {{ item[1].name }} -asOrg {{ item[0] }}
  args:
    chdir: "{{ fabricworkdir }}"
  with_nested:
    - "{{ peerorgs }}"
    - "{{ channels }}"

- name: Create scenario directory
  file:
    path: "{{ fabricworkdir }}/keyfiles/CITest/{{ item }}"
    state: directory
    force: yes
    mode: 0775
  with_items:
    - "{{ testcase }}"
    - "{{ testcase_query }}"
  when: testcase == "multihost"

- name: Create preconfig directory for invoke
  file:
    path: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/{{ item }}"
    state: directory
    force: yes
    mode: 0755
  with_items:
    - channels
    - "{{ chaincode }}"
  when: testcase == "multihost"

- name: Create chaincode directory for invoke and query
  file:
    path: "{{ fabricworkdir }}/keyfiles/CITest/{{ item }}/{{ chaincode }}"
    state: directory
    force: yes
    mode: 0755
  with_items:
    - "{{ testcase }}"
    - "{{ testcase_query }}"
  when: testcase == "multihost"

- name: Create samplecc-create file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-create-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/channels/chan{{ item.channelnum }}-create-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase == "multihost"

- name: Create runCases-create.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan-create.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/channels/runCases-chan-create{{ item }}-TLS.txt"
  with_sequence: start=1 end={{ (endlist|int) }}
  when: testcase == "multihost"

- name: Create samplecc-join file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-join-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/channels/chan{{ item.channelnum }}-join-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase == "multihost"

- name: Create runCases-join.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan-join.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/channels/runCases-chan-join{{ item }}-TLS.txt"
  with_sequence: start=1 end={{ (endlist|int) }}
  when: testcase == "multihost"

- name: Create samplecc-install file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-install-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-install-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase == "multihost"

- name: Create runCases-install.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan-install.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/{{ chaincode }}/runCases-chan-install{{ item }}-TLS.txt"
  with_sequence: start=1 end={{ (endlist|int) }}
  when: testcase == "multihost"

- name: Create samplecc-instantiate file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-instantiate-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-instantiate-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase == "multihost"

- name: Create runCases-instantiate.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan-instantiate.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/preconfig/{{ chaincode }}/runCases-chan-instantiate{{ item }}-TLS.txt"
  with_sequence: start=1 end={{ (endlist|int) }}
  when: testcase == "multihost"

- name: Create samplecc-invoke file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-invoke-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase }}-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase == "multihost"

- name: Create runCases-invoke.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ item[1] }}/{{ chaincode }}/runCases-chan{{ item[0].channelnum }}-{{ item[1] }}-TLS.txt"
  with_nested:
    - "{{ channellists }}"
    - "{{ testcase }}"
  when: testcase == "multihost"

- name: Create PTEMgr.txt file for invoke
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/PTEMgr.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ item }}/{{ chaincode }}/PTEMgr-{{ item }}-TLS.txt"
  with_items: "{{ testcase }}"
  when: testcase == "multihost"

- name: Create samplecc-query file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/samplecc-chan-query-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ testcase_query }}/{{ chaincode }}/{{ chaincode }}-chan{{ item.channelnum }}-{{ testcase_query }}-TLS.json"
  with_items: "{{ channellists }}"
  when: testcase_query == "multihost_query"

- name: Create runCases-query.txt file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/runCases-chan.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ item[1] }}/{{ chaincode }}/runCases-chan{{ item[0].channelnum }}-{{ item[1] }}-TLS.txt"
  with_nested:
    - "{{ channellists }}"
    - "{{ testcase_query }}"
  when: testcase_query == "multihost_query"

- name: Create PTEMgr.txt file for query
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/PTEMgr.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/{{ item }}/{{ chaincode }}/PTEMgr-{{ item }}-TLS.txt"
  with_items: "{{ testcase_query }}"
  when: testcase_query == "multihost_query"

- name: Create CISCFiles directory
  file:
    path: "{{ fabricworkdir }}/keyfiles/CITest/CISCFiles"
    state: directory
    mode: 0755

- name: Create config file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/config-chan-TLS.j2"
    dest: "{{ fabricworkdir }}/keyfiles/CITest/CISCFiles/config-chan{{ item.1 }}-TLS.json"
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Create admin execution file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/admin.j2"
    dest: "{{ fabricworkdir }}/keyfiles/admin.sh"
    mode: "u=rx,g=rx"
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Create client execution file
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/client.j2"
    dest: "{{ fabricworkdir }}/keyfiles/client.sh"
    mode: "u=rx,g=rx"
  with_together:
    - "{{ channels }}"
    - "{{ channelnum }}"

- name: Archive the config files to PTE pod
  archive:
    path: "{{ fabricworkdir }}/keyfiles/CITest"
    dest: "{{ fabricworkdir }}/pteconfig.tgz"

- name: Check the status of secret for pulling images
  command: >-
    ./kubectl --kubeconfig='kubeconfig' get secrets -o=custom-columns=NAME:.metadata.name
    regcred
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  ignore_errors: yes
  no_log: True
  register: "secretstatus"
  when: >
    pte.repo.username | default("") | length > 0 and
    pte.repo.password | default("") | length > 0

- name: Create secret for image
  command: >-
    ./kubectl --kubeconfig kubeconfig create secret docker-registry regcred --docker-server={{ pte.repo.url }}
    --docker-username={{ pte.repo.username }} --docker-password={{ pte.repo.password }} --docker-email=email@email.com
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  register: "secretcreate"
  when: >
    pte.repo.username | default("") | length > 0 and
    pte.repo.password | default("") | length > 0 and
    secretstatus.rc != 0

- name: Create deployment file for PTE
  template:
    src: "{{ playbook_dir }}/ptesetup/templates/pte-k8s.j2"
    dest: "{{ playbook_dir }}/../../vars/pte-{{ item }}-k8s.yml"
  with_items:
    - "admin"
    - "client"

- name: Create configmaps for pte config files, admin and client files
  command: >-
    ./kubectl --kubeconfig kubeconfig create configmap ptetestcase --from-file={{ fabricworkdir }}/keyfiles/admin.sh --from-file={{ fabricworkdir }}/keyfiles/client.sh
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"

- name: Start PTE admin pod
  command: "./kubectl --kubeconfig='kubeconfig' apply -f ../../../../../tools/ATD/vars/pte-admin-k8s.yml"
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  tags: "pteadmin"

- name: Wait for PTE admin pod to come up
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.containerStatuses[].ready pods pteadmin
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  register: pteadminstatus
  until: pteadminstatus.stdout.find("true") >= 0
  retries: 10
  delay: 30
  tags: "pteadmin"

- name: Copy config zip file onto the PTE admin pod
  command: >-
    ./kubectl --kubeconfig kubeconfig cp {{ fabricworkdir }}/pteconfig.tgz pteadmin:/var/hyperledger/fabric/
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  tags: "pteadmin"

- name: Wait for PTE admin pod to be completed
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.containerStatuses[].ready pods pteadmin
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  register: pteadminstatus
  until: pteadminstatus.stdout.find("false") >= 0
  retries: 30
  delay: 120
  tags: "pteadmin"

- name: Logs in PTE admin to local
  shell: >-
    ./kubectl --kubeconfig kubeconfig logs pteadmin -c pteadmin > {{ playbook_dir }}/../../vars/admin-{{ testcase }}-{{ testcase_query }}.log 2>&1
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  #tags: "getlogs"
  tags: "pteadmin"

- name: Start PTE client pod
  command: "./kubectl --kubeconfig='kubeconfig' apply -f ../../../../../tools/ATD/vars/pte-client-k8s.yml"
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  tags: "pteclientup"

- name: Wait for PTE client pod to come up
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.containerStatuses[].ready pods pteclient
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  register: pteclientstatus
  until: pteclientstatus.stdout.find("true") >= 0
  retries: 10
  delay: 30

- name: Copy config zip file onto the PTE client pod
  command: >-
    ./kubectl --kubeconfig kubeconfig cp {{ fabricworkdir }}/pteconfig.tgz pteclient:/var/hyperledger/fabric/
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"

- name: Check the health of the PTE client
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.containerStatuses[].ready pods pteclient
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  register: ptestatus
  until: ptestatus.stdout.find("false") >= 0
  retries: 2500
  delay: 120

- name: Logs in PTE client to local
  shell: >-
    ./kubectl --kubeconfig kubeconfig logs pteclient -c pteclient > {{ playbook_dir }}/../../vars/client-{{ testcase }}-{{ testcase_query }}.log 2>&1
  args:
    chdir: "{{ playbook_dir }}/../../../../cello/src/agent/ansible/vars/"
  tags: "getlogs"
